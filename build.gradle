plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.authorization.server'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springCloudVersion', "2022.0.4")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bus-kafka', version: '4.0.1'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task buildAndRun {
    group = 'docker'
    description = 'Builds the project and starts a Docker container'

    dependsOn 'build'

    doLast {
        def imageName = "eurekaservice:latest" // Replace with your preferred image name
        def containerName = "eurekaservice"

        // Build the Docker image
        println "Building Docker image..."
        exec {
            commandLine 'docker', 'build', '-t', imageName, '.'
        }

        // Stop and remove any existing container with the same name
        println "Stopping and removing existing container (if any)..."
        try {
            exec {
                commandLine 'docker', 'rm', '-f', containerName
                ignoreExitValue true
            }
            println "Attempted to remove container: $containerName"
        } catch (Exception e) {
            println "Failed to remove container: $containerName. It might not exist."
        }

        // Run the Docker container
//        docker network create microservice-network
        println "Running Docker container..."
        exec {
            commandLine 'docker', 'run', '-d', '--name', containerName, "--network", "microservice-network", "--network-alias", "eureka", '-p', '8761:8761', imageName
        }
    }
}
